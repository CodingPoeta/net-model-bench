// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: pkg/grpc/proto/blocktransfer.proto

package blocktransfer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BlockTransferService_Get_FullMethodName = "/proto.BlockTransferService/Get"
)

// BlockTransferServiceClient is the client API for BlockTransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockTransferServiceClient interface {
	Get(ctx context.Context, in *BlockTransferRequest, opts ...grpc.CallOption) (*BlockTransferResponse, error)
}

type blockTransferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockTransferServiceClient(cc grpc.ClientConnInterface) BlockTransferServiceClient {
	return &blockTransferServiceClient{cc}
}

func (c *blockTransferServiceClient) Get(ctx context.Context, in *BlockTransferRequest, opts ...grpc.CallOption) (*BlockTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockTransferResponse)
	err := c.cc.Invoke(ctx, BlockTransferService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockTransferServiceServer is the server API for BlockTransferService service.
// All implementations must embed UnimplementedBlockTransferServiceServer
// for forward compatibility
type BlockTransferServiceServer interface {
	Get(context.Context, *BlockTransferRequest) (*BlockTransferResponse, error)
	mustEmbedUnimplementedBlockTransferServiceServer()
}

// UnimplementedBlockTransferServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlockTransferServiceServer struct {
}

func (UnimplementedBlockTransferServiceServer) Get(context.Context, *BlockTransferRequest) (*BlockTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBlockTransferServiceServer) mustEmbedUnimplementedBlockTransferServiceServer() {}

// UnsafeBlockTransferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockTransferServiceServer will
// result in compilation errors.
type UnsafeBlockTransferServiceServer interface {
	mustEmbedUnimplementedBlockTransferServiceServer()
}

func RegisterBlockTransferServiceServer(s grpc.ServiceRegistrar, srv BlockTransferServiceServer) {
	s.RegisterService(&BlockTransferService_ServiceDesc, srv)
}

func _BlockTransferService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockTransferServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockTransferService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockTransferServiceServer).Get(ctx, req.(*BlockTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockTransferService_ServiceDesc is the grpc.ServiceDesc for BlockTransferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockTransferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BlockTransferService",
	HandlerType: (*BlockTransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _BlockTransferService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/grpc/proto/blocktransfer.proto",
}
